1-

int product(int a, int b) { ----------> cons= O(1)
    int sum = 0;             ----------> cons= O(1)
    for (int I = 0; I < b; I++) { ----------> loop= O(b)
        sum += a;  ----------> cons= O(1
    }
    return sum; ----------> cons= O(1 
}

"Big 0 = 0(b)"

-------------------------------------------------------------------------------------------
2-
static int power(int a, int b) { ----------> cons= O(1)
    if (b < 0) return a;----------> condition= O(1)
    if (b == 0) return 1;----------> condition= O(1)
    int sum = a;
    for (int I = 0; I < b - 1; I++) {----------> loop= O(b)
        sum *= a; ----------> cons= O(1)
    }
    return sum;----------> cons= O(1)

"Big 0 = 0(b)"
}

-------------------------------------------------------------------------------------------

3-
 int mod(int a, int b) { ----------> cons= O(1)
    if (b <=a) return -1;----------> condition= O(1)
    int div = a / b;  ----------> cons= O(1)
    return a - div * b; ----------> cons= O(1)

"Big 0 = 0(1)"
}

-------------------------------------------------------------------------------------------

4-
int div(int a, int b) { ----------> cons= O(1)
    int count = a;----------> cons= O(1)
    int sum = b;----------> cons= O(1)
    while (sum <= a) {----------> loop= O(b)
        sum += b; ----------> cons= O(1)
        count++; ----------> cons= O(1)
    }
    return count; ----------> cons= O(1)
}
"Big 0 = 0(a)"

-------------------------------------------------------------------------------------------

5-
  return sqrt_helper(n, 1, n);
}
int sqrt_helper(int n, int min, int max) {----------> cons= O(1)
    if (max < min) return -1; ----------> condition= O(1)
    int guess = (min + max) / 2;----------> condition= O(1)
    if (guess * guess == n) {----------> condition= O(1)
        return guess;----------> condition= O(1)
    } else if (guess *guess <n) {----------> condition= O(1)
        return sqrt_helper(n, guess + 1, max) ; ----------> condition= O(1)
    } else { ----------> condition= O(1)
        return sqrt_helper(n, min, guess - 1);----------> cons= O(1)
    }
}

بوجود اكثر من شرط "بحث ثنائي" Big o= O(logn)"

-------------------------------------------------------------------------------------------





